input_number:
  ac_timer_hour:
    name: Hour
    icon: mdi:timer
    initial: 1
    min: 0
    max: 23
    step: 1
  ac_timer_minute:
    name: Minute
    icon: mdi:timer
    initial: 30
    min: 0
    max: 59
    step: 1

  ac_delay_hour:
    name: Hour
    icon: mdi:timer
    initial: 1
    min: 0
    max: 23
    step: 1
  ac_delay_minute:
    name: Minute
    icon: mdi:timer
    initial: 30
    min: 0
    max: 59
    step: 1

  ac_start_hour:
    name: Start Hour
    icon: mdi:timer
    initial: 6
    min: 0
    max: 23
    step: 1
  ac_start_minute:
    name: Start Minute
    icon: mdi:timer
    initial: 0
    min: 0
    max: 55
    step: 5

  ac_stop_hour:
    name: Stop Hour
    icon: mdi:timer
    initial: 7
    min: 0
    max: 23
    step: 1
  ac_stop_minute:
    name: Stop Minute
    icon: mdi:timer
    initial: 30
    min: 0
    max: 55
    step: 5


input_boolean:
  ac_timer_enabled:
    name: Enable timer
    initial: off
    icon: mdi:toggle-switch

  ac_delay_enabled:
    name: Enable delay
    initial: off
    icon: mdi:toggle-switch

  ac_time_enabled:
    name: Control AC based on time
    initial: off
    icon: mdi:toggle-switch


sensor:
  platform: template
  sensors:
    timer_hour:
      value_template: '{{ states("input_number.ac_timer_hour") | round(0) }}'
    timer_minute:
      value_template: '{{ states("input_number.ac_timer_minute") | round(0) }}'
    timer_duration:
      value_template: >
        {% if states("input_boolean.ac_timer_enabled") %}
          {% if states("sensor.timer_hour") | length == 1 %}0{% endif %}{{states("sensor.timer_hour") }}:{% if states("sensor.timer_minute") | length == 1 %}0{% endif %}{{ states("sensor.timer_minute") }}:00
        {% else %}
          00:00:00
        {% endif %}

    delay_hour:
      value_template: '{{ states("input_number.ac_delay_hour") | round(0) }}'
    delay_minute:
      value_template: '{{ states("input_number.ac_delay_minute") | round(0) }}'
    delay_duration:
      value_template: >
        {% if states("input_boolean.ac_delay_enabled") %}
          {% if states("sensor.delay_hour") | length == 1 %}0{% endif %}{{states("sensor.delay_hour") }}:{% if states("sensor.delay_minute") | length == 1 %}0{% endif %}{{ states("sensor.delay_minute") }}:00
        {% else %}
          00:00:00
        {% endif %}

    time_start:
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.ac_start_hour") | int, states("input_number.ac_start_minute") | int) }}'

    time_stop:
      value_template: '{{ "%0.02d:%0.02d" | format(states("input_number.ac_stop_hour") | int, states("input_number.ac_stop_minute") | int) }}'


timer:
  ac_timer:
    name: Timer
    icon: mdi:timer

  ac_delay:
    name: Delay
    icon: mdi:timer


homeassistant:
  customize:
    script.ac_remote_control:
      custom_ui_state_card: state-card-tiles
      config:
        columns: 4
        row_height: 75px
        column_width: 85px
        gap: 10px
        color: '#353B65'
        entities:
          - entity: script.turn_on_ludovics_ac
            icon: mdi:play
            column_span: 2
          - entity: script.turn_off_ludovics_ac
            icon: mdi:stop
            column_span: 2
          - entity: script.cold_air_mode_ludovics_ac
            label: AC
            column_span: 2
          - entity: script.strong_wind_ludovics_ac
            label: Strong wind
            column_span: 2
          - entity: script.dehumidify_mode_ludovics_ac
            label: Dehumidify
            column_span: 2
          - entity: script.weak_wind_ludovics_ac
            label: Weak wind
            column_span: 2
          - entity: script.blow_air_mode_ludovics_ac
            label: Blow air
            column_span: 2
          - entity: script.breeze_ludovics_ac
            label: Breeze
            column_span: 2
          - entity: script.temperature_up_ludovics_ac
            label: Temperature up
            column_span: 2
          - entity: script.time_up_ludovics_ac
            label: Time up
            column_span: 2
          - entity: script.temperature_down_ludovics_ac
            label: Temperature down
            column_span: 2
          - entity: script.time_down_ludovics_ac
            label: Time down
            column_span: 2
    script.fan_remote_control:
      custom_ui_state_card: state-card-tiles
      config:
        columns: 4
        row_height: 75px
        column_width: 85px
        gap: 10px
        color: '#353B65'
        entities:
          - entity: script.toggle_ludovics_fan
            label: ON/OFF
            column_span: 2
          - entity: script.change_wind_power_ludovics_fan
            label: wind power
            column_span: 1
          - entity: script.change_time_ludovics_fan
            label: time
            column_span: 1

group:
  ac_set_timer:
    name: AC Set Timer
    entities:
      - input_number.ac_timer_hour
      - input_number.ac_timer_minute
      - timer.ac_timer
      - input_boolean.ac_timer_enabled

  ac_set_delay:
    name: AC Set Delay
    entities:
      - input_number.ac_delay_hour
      - input_number.ac_delay_minute
      - timer.ac_delay
      - input_boolean.ac_delay_enabled

  ac_set_time:
    name: AC Time Slot
    entities:
      - input_number.ac_start_hour
      - input_number.ac_start_minute
      - input_number.ac_stop_hour
      - input_number.ac_stop_minute
      - input_boolean.ac_time_enabled

  ac_control_panel:
    name: AC Control Panel
    entities:
      - script.ac_remote_control

  fan_control_panel:
    name: Fan Control Panel
    entities:
      - script.fan_remote_control


automation:
  - alias: Start AC timer
    trigger:
      platform: state
      entity_id: input_boolean.ac_timer_enabled
      from: 'off'
      to: 'on'
    condition:
      condition: or
      conditions:
        - condition: template
          value_template: '{{ states("sensor.timer_hour") != 0 }}'
        - condition: template
          value_template: '{{ states("sensor.timer_minute") != 0 }}'
    action:
      - service: script.turn_on_ludovics_ac
      - service: timer.start
        entity_id: timer.ac_timer
        data_template:
          duration: '{{ states("sensor.timer_duration") }}'

  - alias: Stops AC
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.ac_timer
    action:
      - service: script.turn_off_ludovics_ac

  - alias: Cancel AC timer
    trigger:
      platform: state
      entity_id: input_boolean.ac_timer_enabled
      from: 'on'
      to: 'off'
    action:
      - service: timer.cancel
        entity_id: timer.ac_timer

  - alias: Start AC delay
    trigger:
      platform: state
      entity_id: input_boolean.ac_delay_enabled
      from: 'off'
      to: 'on'
    condition:
      condition: or
      conditions:
        - condition: template
          value_template: '{{ states("sensor.delay_hour") != 0 }}'
        - condition: template
          value_template: '{{ states("sensor.delay_minute") != 0 }}'
    action:
      - service: timer.start
        entity_id: timer.ac_delay
        data_template:
          duration: '{{ states("sensor.delay_duration") }}'

  - alias: End delay start AC
    trigger:
      platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.ac_delay
    action:
      - service: script.turn_off_ludovics_ac

  - alias: Cancel AC delay
    trigger:
      platform: state
      entity_id: input_boolean.ac_delay_enabled
      from: 'on'
      to: 'off'
    action:
      - service: timer.cancel
        entity_id: timer.ac_delay

  - alias: AC time start
    trigger:
      - platform: time
        minutes: '/1'
        seconds: 00
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ now().time().strftime("%H:%M") == states("sensor.time_start") }}'
        - condition: state
          entity_id: input_boolean.ac_time_enabled
          state: 'on'
    action:
      - service: script.turn_on_ludovics_ac

  - alias: AC time stop
    trigger:
      - platform: time
        minutes: '/1'
        seconds: 00
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{{ now().time().strftime("%H:%M") == states("sensor.time_stop") }}'
        - condition: state
          entity_id: input_boolean.ac_time_enabled
          state: 'on'
    action:
      - service: script.turn_off_ludovics_ac


script:
  ac_remote_control:
    sequence:
  fan_remote_control:
    sequence:
